require(goeveg)
require(vegan)
require(tidyverse)
require(reshape2)
require(ggfortify)
require(GGally)
require(sads)
source("./logloghistplot.R")
source("./ParetoFunctionDefinitions.R")
trees <- read.table("./treeDataNov252018_checked20211012.txt", header=TRUE, sep="\t", strip.white=TRUE)
trees$forestType <- substring(trees$plot, 1, 2)
ggplot(trees, aes(x = dbh, group = forestType)) + geom_density(aes(group = forestType, fill = forestType),  alpha = 0.5)
trees <- trees %>% mutate(BA = pi*(dbh/2)^2)
structurebyplot <- trees %>% group_by(forestType, plot) %>% summarise(plotBA = sum(BA, na.rm = T), stemDens = n())
print(structurebyplot)
ggplot(structurebyplot, aes(x = stemDens, y = plotBA)) + geom_point(aes(col = forestType))
treesEG <- trees %>% filter(forestType == 'EG')
treesDD <- trees %>% filter(forestType == 'DD', !is.na(dbh))
par(mfrow = c(1, 2))
logloghistplot(treesEG$dbh, bins = 25, type = 'counts', yl = 'ln(counts)')
logloghistplot(treesDD$dbh, bins = 25, type = 'counts', yl = 'ln(counts)')
paretoMLfunc <- function(plotname){
plotData <- trees %>% filter(plot == plotname, !is.na(trees$dbh))
fit <- fitpareto(plotData$dbh)
return(fit@coef[1])
}
paretoMLfunc2 <- function(plotname){
plotData <- trees %>% filter(plot == plotname, !is.na(trees$dbh))
fit <- fitpareto(plotData$dbh)
return(fit@coef[2])
}
plots <- unique(trees$plot)
shapes <- unlist(lapply(plots, paretoMLfunc))
scales <- unlist(lapply(plots, paretoMLfunc2))
lambdas <- cbind.data.frame(plotID = plots, lambda = shapes, scales = scales, forestType = substring(plots, 1, 2))
boxplot(lambdas$lambda ~ lambdas$forestType)
wilcox.test(lambdas$lambda ~ lambdas$forestType)
ks.test(treesDD$dbh, treesEG$dbh)
makeHistFunc <- function(plotname, bins = 15){
plotData <- trees %>% filter(plot == plotname, !is.na(trees$dbh))
xhist <- hist(as.numeric(plotData$dbh), breaks=bins, plot=F)
counts <- xhist$counts
mids <- xhist$mids
density <- xhist$density
plotID <- rep(plotname, length(counts))
return(cbind(counts, density, mids, plotID))
}
hists <- lapply(plots, makeHistFunc)
hists <- do.call(rbind.data.frame, hists)
hists$counts <- as.numeric(paste(hists$counts))
hists$mids <- as.numeric(paste(hists$mids))
hists$density <- as.numeric(paste(hists$density))
hists$plot_type <- substring(hists$plotID, 1, 2)
hists$logDens <- log(hists$density)
hists <- left_join(hists, lambdas)
hists$paretoPred <- sads::dpareto(x = hists$mids, shape = hists$lambda, scale = 5, log = F)
mylabels <- lambdas %>% select(plotID, lambda) %>% mutate(labels = paste0('plot ', 1:10, ': ', expression(lambda), ' = ', round(lambda, digits = 2 )))
labels <- mylabels$labels
names(labels) <- mylabels$plotID
hists$plotID <- factor(hists$plotID, labels = paste0('lambda',' = ',round(lambdas$lambda, digits = 2)))
ggplot(hists, aes(x = mids, y = counts)) + geom_line(aes(color = plot_type)) + geom_point(aes(color = plot_type)) + facet_wrap(~plotID, scales = 'fixed', labeller = label_parsed) + theme_classic()
##+ geom_line(aes(y = paretoPred))
##next step is figure out how to plot the pareto function.
knitr::opts_chunk$set(echo = TRUE)
require(goeveg)
require(vegan)
require(tidyverse)
require(reshape2)
require(ggfortify)
require(GGally)
require(sads)
source("./logloghistplot.R")
source("./ParetoFunctionDefinitions.R")
trees <- read.table("./treeDataNov252018_checked20211012.txt", header=TRUE, sep="\t", strip.white=TRUE)
trees$forestType <- substring(trees$plot, 1, 2)
ggplot(trees, aes(x = dbh, group = forestType)) + geom_density(aes(group = forestType, fill = forestType),  alpha = 0.5)
trees <- trees %>% mutate(BA = pi*(dbh/2)^2)
structurebyplot <- trees %>% group_by(forestType, plot) %>% summarise(plotBA = sum(BA, na.rm = T), stemDens = n())
print(structurebyplot)
ggplot(structurebyplot, aes(x = stemDens, y = plotBA)) + geom_point(aes(col = forestType))
treesEG <- trees %>% filter(forestType == 'EG')
treesDD <- trees %>% filter(forestType == 'DD', !is.na(dbh))
par(mfrow = c(1, 2))
logloghistplot(treesEG$dbh, bins = 25, type = 'counts', yl = 'ln(counts)')
logloghistplot(treesDD$dbh, bins = 25, type = 'counts', yl = 'ln(counts)')
paretoMLfunc <- function(plotname){
plotData <- trees %>% filter(plot == plotname, !is.na(trees$dbh))
fit <- fitpareto(plotData$dbh)
return(fit@coef[1])
}
paretoMLfunc2 <- function(plotname){
plotData <- trees %>% filter(plot == plotname, !is.na(trees$dbh))
fit <- fitpareto(plotData$dbh)
return(fit@coef[2])
}
plots <- unique(trees$plot)
shapes <- unlist(lapply(plots, paretoMLfunc))
scales <- unlist(lapply(plots, paretoMLfunc2))
lambdas <- cbind.data.frame(plotID = plots, lambda = shapes, scales = scales, forestType = substring(plots, 1, 2))
boxplot(lambdas$lambda ~ lambdas$forestType)
wilcox.test(lambdas$lambda ~ lambdas$forestType)
ks.test(treesDD$dbh, treesEG$dbh)
makeHistFunc <- function(plotname, bins = 15){
plotData <- trees %>% filter(plot == plotname, !is.na(trees$dbh))
xhist <- hist(as.numeric(plotData$dbh), breaks=bins, plot=F)
counts <- xhist$counts
mids <- xhist$mids
density <- xhist$density
plotID <- rep(plotname, length(counts))
return(cbind(counts, density, mids, plotID))
}
hists <- lapply(plots, makeHistFunc)
hists <- do.call(rbind.data.frame, hists)
hists$counts <- as.numeric(paste(hists$counts))
hists$mids <- as.numeric(paste(hists$mids))
hists$density <- as.numeric(paste(hists$density))
hists$plot_type <- substring(hists$plotID, 1, 2)
hists$logDens <- log(hists$density)
hists <- left_join(hists, lambdas)
hists$paretoPred <- sads::dpareto(x = hists$mids, shape = hists$lambda, scale = 5, log = F)
mylabels <- lambdas %>% select(plotID, lambda) %>% mutate(labels = paste0('plot ', 1:10, ': ', expression(lambda), ' = ', round(lambda, digits = 2 )))
labels <- mylabels$labels
names(labels) <- mylabels$plotID
hists$plotID <- factor(hists$plotID, labels = paste0('lambda',' = ',round(lambdas$lambda, digits = 2)))
ggplot(hists, aes(x = mids, y = counts)) + geom_line(aes(color = plot_type)) + geom_point(aes(color = plot_type)) + facet_wrap(~plotID, scales = 'fixed', labeller = label_parsed) + theme_classic()
##+ geom_line(aes(y = paretoPred))
##next step is figure out how to plot the pareto function.
hists$plotID <- factor(hists$plotID, labels = paste0('lambda = ',round(lambdas$lambda, digits = 2)))
ggplot(hists, aes(x = mids, y = counts)) + geom_line(aes(color = plot_type)) + geom_point(aes(color = plot_type)) + facet_wrap(~plotID, scales = 'fixed', labeller = label_parsed) + theme_classic()
hists$paretoPred <- sads::dpareto(x = hists$mids, shape = hists$lambda, scale = 5, log = F)
mylabels <- lambdas %>% select(plotID, lambda) %>% mutate(labels = paste0('plot ', 1:10, ': ', expression(lambda), ' = ', round(lambda, digits = 2 )))
labels <- mylabels$labels
names(labels) <- mylabels$plotID
ggplot(hists, aes(x = mids, y = counts)) + geom_line(aes(color = plot_type)) + geom_point(aes(color = plot_type)) + facet_wrap(~plotID, scales = 'fixed', labeller = label_parsed) + theme_classic()
ggplot(hists, aes(x = mids, y = counts)) + geom_line(aes(color = plot_type)) + geom_point(aes(color = plot_type)) + facet_wrap(~plotID, scales = 'fixed', labeller = labels) + theme_classic()
labels
ggplot(hists, aes(x = mids, y = counts)) + geom_line(aes(color = plot_type)) + geom_point(aes(color = plot_type)) + facet_wrap(~plotID, scales = 'fixed', labeller = labeller(plotID = labels)) + theme_classic()
library(glue)
library(glue)
?glue
ggplot(hists, aes(x = mids, y = counts)) + geom_line(aes(color = plot_type)) + geom_point(aes(color = plot_type)) + facet_wrap(~plotID, scales = 'fixed', labeller = labeller(plotID = labels)) + theme_classic()
ggplot(hists, aes(x = mids, y = counts)) + geom_line(aes(color = plot_type)) + geom_point(aes(color = plot_type)) + facet_wrap(~plotID, scales = 'fixed', labeller = as_labeller(plotID = labels)) + theme_classic()
ggplot(hists, aes(x = mids, y = counts)) + geom_line(aes(color = plot_type)) + geom_point(aes(color = plot_type)) + facet_wrap(~plotID, scales = 'fixed', labeller = as_labeller(labels)) + theme_classic()
ggplot(hists, aes(x = mids, y = counts)) + geom_line(aes(color = plot_type)) + geom_point(aes(color = plot_type)) + facet_wrap(~plotID, scales = 'fixed', labeller = labeller(plotID = labels)) + theme_classic()
names(labels) <- mylabels$plotID
labels
ggplot(hists, aes(x = mids, y = counts)) + geom_line(aes(color = plot_type)) + geom_point(aes(color = plot_type)) + facet_wrap(~plotID, scales = 'fixed', labeller = labeller(plotID = labels, .default = label_parsed)) + theme_classic()
hists$paretoPred <- sads::dpareto(x = hists$mids, shape = hists$lambda, scale = 5, log = F)
mylabels <- lambdas %>% select(plotID, lambda) %>% mutate(labels = paste0('plot ', 1:10, ': ', expression(lambda), ' = ', round(lambda, digits = 2 )))
hists <- lapply(plots, makeHistFunc)
hists <- do.call(rbind.data.frame, hists)
hists$counts <- as.numeric(paste(hists$counts))
hists$mids <- as.numeric(paste(hists$mids))
hists$density <- as.numeric(paste(hists$density))
hists$plot_type <- substring(hists$plotID, 1, 2)
hists$logDens <- log(hists$density)
hists <- left_join(hists, lambdas)
hists$paretoPred <- sads::dpareto(x = hists$mids, shape = hists$lambda, scale = 5, log = F)
mylabels <- lambdas %>% select(plotID, lambda) %>% mutate(labels = paste0('plot ', 1:10, ': ', expression(lambda), ' = ', round(lambda, digits = 2 )))
labels <- mylabels$labels
names(labels) <- mylabels$plotID
library(glue)
ggplot(hists, aes(x = mids, y = counts)) + geom_line(aes(color = plot_type)) + geom_point(aes(color = plot_type)) + facet_wrap(~plotID, scales = 'fixed', labeller = labeller(plotID = labels, .default = label_parsed)) + theme_classic()
mylabels <- lambdas %>% select(plotID, lambda) %>% mutate(labels = paste0('plot ', 1:10, expression(lambda), ' = ', round(lambda, digits = 2 )))
labels <- mylabels$labels
names(labels) <- mylabels$plotID
ggplot(hists, aes(x = mids, y = counts)) + geom_line(aes(color = plot_type)) + geom_point(aes(color = plot_type)) + facet_wrap(~plotID, scales = 'fixed', labeller = labeller(plotID = labels, .default = label_parsed)) + theme_classic()
mylabels <- lambdas %>% select(plotID, lambda) %>% mutate(labels = paste0('plot ', expression(lambda), ' = ', round(lambda, digits = 2 )))
labels <- mylabels$labels
names(labels) <- mylabels$plotID
ggplot(hists, aes(x = mids, y = counts)) + geom_line(aes(color = plot_type)) + geom_point(aes(color = plot_type)) + facet_wrap(~plotID, scales = 'fixed', labeller = labeller(plotID = labels, .default = label_parsed)) + theme_classic()
mylabels <- lambdas %>% select(plotID, lambda) %>% mutate(labels = expression(paste0('plot ', 1:10, ': ', lambda, ' = ', round(lambda, digits = 2 )))
mylabels <- lambdas %>% select(plotID, lambda) %>% mutate(labels = expression(paste0('plot ', 1:10, ': ', lambda, ' = ', round(lambda, digits = 2 ))) )
labels <- mylabels$labels
names(labels) <- mylabels$plotID
mylabels <- lambdas %>% select(plotID, lambda) %>% mutate(labels = paste0('plot ', 1:10, ': ', lambda, ' = ', round(lambda, digits = 2 )))
labels <- mylabels$labels
names(labels) <- mylabels$plotID
library(glue)
ggplot(hists, aes(x = mids, y = counts)) + geom_line(aes(color = plot_type)) + geom_point(aes(color = plot_type)) + facet_wrap(~plotID, scales = 'fixed', labeller = labeller(plotID = labels, .default = label_parsed)) + theme_classic()
labels = expression(paste0('plot ', 1:10, ': ', lambda, ' = ', round(lambdas$lambda, digits = 2 )))
labels
labels = paste0('plot ', 1:10, ': ', lambda, ' = ', round(lambdas$lambda, digits = 2 )))
labels = paste0('plot ', 1:10, ': ', lambda, ' = ', round(lambdas$lambda, digits = 2 ))
labels = paste0('plot ', 1:10, ': ', 'Lambda', ' = ', round(lambdas$lambda, digits = 2 ))
names(labels) <- lambdas$plotID
ggplot(hists, aes(x = mids, y = counts)) + geom_line(aes(color = plot_type)) + geom_point(aes(color = plot_type)) + facet_wrap(~plotID, scales = 'fixed', labeller = labeller(plotID = labels, .default = label_parsed)) + theme_classic()
labels
labels = paste0('Lambda', ' = ', round(lambdas$lambda, digits = 2 ))
names(labels) <- lambdas$plotID
ggplot(hists, aes(x = mids, y = counts)) + geom_line(aes(color = plot_type)) + geom_point(aes(color = plot_type)) + facet_wrap(~plotID, scales = 'fixed', labeller = labeller(plotID = labels, .default = label_parsed)) + theme_classic()
labels = paste0('lambda', ' = ', round(lambdas$lambda, digits = 2 ))
names(labels) <- lambdas$plotID
ggplot(hists, aes(x = mids, y = counts)) + geom_line(aes(color = plot_type)) + geom_point(aes(color = plot_type)) + facet_wrap(~plotID, scales = 'fixed', labeller = labeller(plotID = labels, .default = label_parsed)) + theme_classic()
labels
ggplot(hists, aes(x = mids, y = counts)) + geom_line(aes(color = plot_type)) + geom_point(aes(color = plot_type)) + facet_wrap(~plotID, nrow = 2, scales = 'fixed', labeller = labeller(plotID = labels, .default = label_parsed)) + theme_classic()
?glue
ggplot(hists, aes(x = mids, y = counts)) + geom_line(aes(color = plot_type)) + geom_point(aes(color = plot_type)) + facet_wrap(~glue("plot {plotID}, lambda = {lambdas$lambda}"), nrow = 2, scales = 'fixed', labeller = labeller(plotID = labels, .default = label_parsed)) + theme_classic()
ggplot(hists, aes(x = mids, y = counts)) + geom_line(aes(color = plot_type)) + geom_point(aes(color = plot_type)) + facet_wrap(~glue("plot {plotID}, lambda = {hists$lambda}"), nrow = 2, scales = 'fixed', labeller = labeller(plotID = labels, .default = label_parsed)) + theme_classic()
head(hists)
ggplot(hists, aes(x = mids, y = counts)) + geom_line(aes(color = plot_type)) + geom_point(aes(color = plot_type)) + facet_wrap(~glue("plot {plotID}, lambda = {hists$lambda}"), nrow = 2, scales = 'fixed')#, labeller = labeller(plotID = labels, .default = label_parsed)) + theme_classic()
ggplot(hists, aes(x = mids, y = counts)) + geom_line(aes(color = plot_type)) + geom_point(aes(color = plot_type)) + facet_wrap(~glue("plot {plotID}, lambda = {round(hists$lambda,2)}"), nrow = 2, scales = 'fixed')#, labeller = labeller(plotID = labels, .default = label_parsed)) + theme_classic()
ggplot(hists, aes(x = mids, y = counts)) + geom_line(aes(color = plot_type)) + geom_point(aes(color = plot_type)) + facet_wrap(~glue("plot {plotID}, lambda* = {round(hists$lambda,2)}"), nrow = 2, scales = 'fixed')#, labeller = labeller(plotID = labels, .default = label_parsed)) + theme_classic()
ggplot(hists, aes(x = mids, y = counts)) + geom_line(aes(color = plot_type)) + geom_point(aes(color = plot_type)) + facet_wrap(~glue("plot {plotID}, \\lambda = {round(hists$lambda,2)}"), nrow = 2, scales = 'fixed')#, labeller = labeller(plotID = labels, .default = label_parsed)) + theme_classic()
ggplot(hists, aes(x = mids, y = counts)) + geom_line(aes(color = plot_type)) + geom_point(aes(color = plot_type)) + facet_wrap(~glue("plot {plotID}, \lambda = {round(hists$lambda,2)}"), nrow = 2, scales = 'fixed')#, labeller = labeller(plotID = labels, .default = label_parsed)) + theme_classic()
ggplot(hists, aes(x = mids, y = counts)) + geom_line(aes(color = plot_type)) + geom_point(aes(color = plot_type)) + facet_wrap(~glue("plot {plotID}, lambda[]* = {round(hists$lambda,2)}"), nrow = 2, scales = 'fixed')#, labeller = labeller(plotID = labels, .default = label_parsed)) + theme_classic()
ggplot(hists, aes(x = mids, y = counts)) + geom_line(aes(color = plot_type)) + geom_point(aes(color = plot_type)) + facet_wrap(~glue("plot {plotID}, \039b = {round(hists$lambda,2)}"), nrow = 2, scales = 'fixed')#, labeller = labeller(plotID = labels, .default = label_parsed)) + theme_classic()
ggplot(hists, aes(x = mids, y = counts)) + geom_line(aes(color = plot_type)) + geom_point(aes(color = plot_type)) + facet_wrap(~glue("plot {plotID}, \U039b = {round(hists$lambda,2)}"), nrow = 2, scales = 'fixed')#, labeller = labeller(plotID = labels, .default = label_parsed)) + theme_classic()
ggplot(hists, aes(x = mids, y = counts)) + geom_line(aes(color = plot_type)) + geom_point(aes(color = plot_type)) + facet_wrap(~glue("plot {plotID}, \U03bb = {round(hists$lambda,2)}"), nrow = 2, scales = 'fixed')#, labeller = labeller(plotID = labels, .default = label_parsed)) + theme_classic()
head(lambdas)
ggplot(hists, aes(x = mids, y = counts)) + geom_line(aes(color = plot_type)) + geom_point(aes(color = plot_type)) + facet_wrap(~glue("\U03bb = {round(hists$lambda,2)}"), nrow = 2, scales = 'fixed') + theme_classic()
ggplot(hists, aes(x = mids, y = counts)) + geom_line(aes(color = plot_type)) + geom_point(aes(color = plot_type)) + facet_wrap(~glue("Plot {plotID}: \U03bb = {round(hists$lambda,2)}"), nrow = 2, scales = 'fixed') + theme_classic()
head(hists)
head(lambdas)
levels(hists$plotID)
levels(hists$plotID)
unique(hists$plotID)
unique(as.factor(hists$plotID))
lambdas
levels(lambdas$plotID)
plots
plots <- sort(unique(trees$plot))
shapes <- unlist(lapply(plots, paretoMLfunc))
scales <- unlist(lapply(plots, paretoMLfunc2))
lambdas <- cbind.data.frame(plotID = plots, lambda = shapes, scales = scales, forestType = substring(plots, 1, 2))
plots
shapes
lambdas
lambdas$plotNum <- 1:10
hists <- lapply(plots, makeHistFunc)
hists <- do.call(rbind.data.frame, hists)
hists$counts <- as.numeric(paste(hists$counts))
hists$mids <- as.numeric(paste(hists$mids))
hists$density <- as.numeric(paste(hists$density))
hists$plot_type <- substring(hists$plotID, 1, 2)
hists$logDens <- log(hists$density)
hists <- left_join(hists, lambdas)
hists$paretoPred <- sads::dpareto(x = hists$mids, shape = hists$lambda, scale = 5, log = F)
library(glue)
ggplot(hists, aes(x = mids, y = counts)) + geom_line(aes(color = plot_type)) + geom_point(aes(color = plot_type)) + facet_wrap(~glue("Plot {plotnum}: \U03bb = {round(hists$lambda,2)}"), nrow = 2, scales = 'fixed') + theme_classic()
ggplot(hists, aes(x = mids, y = counts)) + geom_line(aes(color = plot_type)) + geom_point(aes(color = plot_type)) + facet_wrap(~glue("Plot {plotNum}: \U03bb = {round(hists$lambda,2)}"), nrow = 2, scales = 'fixed') + theme_classic()
str(hists)
ggplot(hists, aes(x = mids, y = counts)) + geom_line(aes(color = plot_type)) + geom_point(aes(color = plot_type)) + facet_wrap(~glue("Plot {as.numeric(plotNum)}: \U03bb = {round(hists$lambda,2)}"), nrow = 2, scales = 'fixed') + theme_classic()
levels(as.factor(hists$plotNum))
ggplot(hists, aes(x = mids, y = counts)) + geom_line(aes(color = plot_type)) + geom_point(aes(color = plot_type)) + facet_wrap(~glue("Plot {as.factor(plotNum)}: \U03bb = {round(hists$lambda,2)}"), nrow = 2, scales = 'fixed') + theme_classic()
ggplot(hists, aes(x = mids, y = counts)) + geom_line(aes(color = plot_type)) + geom_point(aes(color = plot_type)) + facet_wrap(~plotNum, nrow = 2)
ggplot(hists, aes(x = mids, y = counts)) + geom_line(aes(color = plot_type)) + geom_point(aes(color = plot_type)) + facet_wrap(~glue("{plotNum}", nrow = 2)
ggplot(hists, aes(x = mids, y = counts)) + geom_line(aes(color = plot_type)) + geom_point(aes(color = plot_type)) + facet_wrap(~glue("{plotNum}", nrow = 2))
ggplot(hists, aes(x = mids, y = counts)) + geom_line(aes(color = plot_type)) + geom_point(aes(color = plot_type)) + facet_wrap(~glue("{plotNum}", nrow = 2))
ggplot(hists, aes(x = mids, y = counts)) + geom_line(aes(color = plot_type)) + geom_point(aes(color = plot_type)) + facet_wrap(~glue("Plot {plotNum}: \U03bb = {round(hists$lambda,2)}"), nrow = 2, scales = 'fixed') + theme_classic()
ggplot(hists, aes(x = mids, y = counts)) + geom_line(aes(color = plot_type)) + geom_point(aes(color = plot_type)) + facet_wrap(~forcats::fct_inorder(glue("Plot {plotNum}: \U03bb = {round(hists$lambda,2)}")), nrow = 2, scales = 'fixed') + theme_classic()
ggplot(hists, aes(x = mids, y = counts)) + geom_line(aes(color = plot_type)) + geom_point(aes(color = plot_type)) + facet_wrap(~fct_inorder(glue("Plot {plotNum}: \U03bb = {round(hists$lambda,2)}")), nrow = 2, scales = 'fixed') + theme_classic()
ggplot(hists, aes(x = mids, y = counts)) + geom_line(aes(color = plot_type)) + geom_point(aes(color = plot_type)) + scale_color_manual(values = c('#F66B0E', '#205375')) + facet_wrap(~fct_inorder(glue("Plot {plotNum}: \U03bb = {round(hists$lambda,2)}")), nrow = 2, scales = 'fixed') + theme_classic()
?scale_color_manual
ggplot(hists, aes(x = mids, y = counts)) + geom_line(aes(color = plot_type)) + geom_point(aes(color = plot_type)) + scale_color_manual(values = c('#F66B0E', '#205375'), labels = c('DDF', 'SEF')) + facet_wrap(~fct_inorder(glue("Plot {plotNum}: \U03bb = {round(hists$lambda,2)}")), nrow = 2, scales = 'fixed') + theme_classic()
getwd()
ggsave('D:/Sync/Research/Ongoing/CambodiaTreePaper/R/sizeFrequencyfig.png', device = 'png')
ggsave('D:/Sync/Research/Ongoing/CambodiaTreePaper/R/sizeFrequencyfig.png', device = 'png', height = 4, width = 5)
ggsave('D:/Sync/Research/Ongoing/CambodiaTreePaper/R/sizeFrequencyfig.png', device = 'png', height = 7 width = 9)
ggsave('D:/Sync/Research/Ongoing/CambodiaTreePaper/R/sizeFrequencyfig.png', device = 'png', height = 7, width = 9)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggtext)
traits <- read.csv("./allTraits_bySpp_BT_maxHt_SpType_SciName.csv", sep = ',')
trees <- read.csv("./treeDataNov252018_wscinames.csv", header=TRUE,  strip.white=TRUE)
trees$BA <- pi*(trees$dbh/2)^2
trees$forestType <- substring(trees$plot, 1, 2)
#filter the tree data to get only the species that have traits
speciesList <- traits$spp
speciesList <- str_remove_all(speciesList, '\\.') ##get rid of periods in names
trees$Scientific_name <- str_remove_all(trees$Scientific_name, '\\.')
trees_filter <- trees %>% filter(species %in% speciesList)
unique(trees$species)[!unique(trees$species) %in% unique(trees_filter$species)]  ##checking for misspelling species in this list. which did we measure traits for, which aren't in the trait list (then correct these spellings)
totals <- trees %>% group_by(plot) %>% summarize(BA = sum(BA, na.rm = T), stems = n())
traits_totals <- trees_filter %>% group_by(plot) %>% summarize(BA = sum(BA, na.rm = T), stems = n())
print(cbind.data.frame(plot = levels(as.factor(trees$plot)), pct_BA = traits_totals$BA/totals$BA, pct_stems = traits_totals$stems/totals$stems))
speciesListBT <- traits$spp[!is.na(traits$BT5)]
trees_filter_BT <- trees %>% filter(species %in% speciesListBT)
BT_totals <- trees_filter_BT %>% group_by(plot) %>% summarize(BA = sum(BA, na.rm = T), stems = n())
print(cbind.data.frame(plot = levels(as.factor(trees$plot)), pct_BA = BT_totals$BA/totals$BA, pct_stems = BT_totals$stems/totals$stems))
#other:
trees_abund <- trees_filter %>%
group_by(plot, forestType, species) %>%
summarize(wts = length(species)) #weight by number individuals
#summarize(wts = sum(BA)) #weight by relative basal area
sitebyspecies <- trees_abund %>% select(-forestType) %>% pivot_wider(names_from = species, values_from = wts, values_fill = 0)
write.table(sitebyspecies, file = './sitebyspecies_traitsponly.csv', sep = ',', row.names = F)
# join w/ traits
trees_abund_traits <- left_join(trees_abund, traits, by = c("species" = "spp"))
# do CWMs
cwm <- trees_abund_traits %>%
group_by(plot, forestType) %>%
summarise(across(petioleLength_mm_mean:maxHtm, ~weighted.mean(., w = wts, na.rm = T))) %>%
select(plot, forestType, leafArea_cm2_mean, SLA_mean, LDMC_mean, N_perc_mean, CN_mean, P_mg_kg_mean, woodDen_g_cm3_mean, maxHtm, BT5)
wilcox <- function(x) {wilcox.test(x ~ cwm$forestType)$p.value}
pvals <- apply(cwm[,3:ncol(cwm)], 2, wilcox)
pvals <- bind_cols(trait = names(pvals), pvals = round(pvals, digits = 2))
cwmLong <- cwm %>% pivot_longer(cols = -c(plot, forestType), names_to = 'trait')
cwmLong$forestType <- ifelse(cwmLong$forestType == 'DD', 'DDF', 'SEF')
trait.labs <- c("Bark thickness (mm)", "Leaf C:N", "LDMC", "Leaf area (cm^(2))", 'Maximum height (m)', 'Leaf N (%)', 'Leaf P (mg kg^(-1))', 'SLA', 'Wood density (g cm^(-3))')
names(trait.labs) <-  c("BT5",  "CN_mean", "LDMC_mean", "leafArea_cm2_mean", "maxHtm", "N_perc_mean", "P_mg_kg_mean", "SLA_mean", "woodDen_g_cm3_mean")
ggplot(cwmLong, aes(x = forestType, y = value)) +
geom_boxplot(aes(fill = forestType)) +
scale_fill_manual(values = c('#F66B0E', '#205375')) +
theme_classic() +
theme(legend.position = 'none') +
xlab('') + ylab('') +
geom_text(data = pvals,
aes(x = Inf, y = Inf,
label = paste("p = ", pvals, sep = " ")),
hjust = 1, vjust = 1, size = 3) +
facet_wrap(~trait, scales = 'free', labeller = labeller(trait = trait.labs)) +
theme(strip.text = element_markdown())
#ggsave('CWM_boxplots.png', device = 'png')
knitr::opts_chunk$set(echo = TRUE)
require(goeveg)
require(vegan)
require(tidyverse)
require(reshape2)
require(ggfortify)
require(GGally)
trees <- read.table("./treeDataNov252018_checked20211012.txt", header=TRUE, sep="\t", strip.white=TRUE)
trees$BA <- pi*(trees$dbh/2)^2
traits <- read.table("./allTraits_bySpp_final_withBT_withmaxHt.csv", header = T, sep = ',', strip.white = T)
traits$maxHtm[traits$maxHtm < 0] <- NA
trees$forestType <- substring(trees$plot, 1, 2)
EGba <- trees %>% filter(forestType == 'EG') %>% summarise(sum(BA))
DDba <- trees %>% filter(forestType == 'DD') %>% summarise(sum(BA, na.rm = T))
#write a function to apply to each species to see whether it's in EG only, DD only, or both
forestTypeFunc <- function(spp){
focalTrees <- trees[trees$species == spp,]
FT <- as.character(unique(focalTrees$forestType))
vegType <- ifelse(length(FT) == 1, FT, 'both')
if(vegType == 'both'){
EGbaFocal <- trees %>%
filter(species == spp, forestType == 'EG') %>%
summarise(EGrelAbund = sum(BA)/EGba)
DDbaFocal <- trees %>%
filter(species == spp, forestType == 'DD') %>%
summarise(DDrelAbund = sum(BA)/DDba)
max <- max(EGbaFocal/DDbaFocal, DDbaFocal/EGbaFocal)
vegType <- ifelse(max < 5, 'both', ifelse(EGbaFocal/DDbaFocal > 1, 'EG', 'DD'))
}
return(vegType)
}
species <- unique(trees$species)
spTable <- data.frame(species = as.character(species), spType = sapply(species, forestTypeFunc))
traits <- left_join(traits, spTable, by = c('spp' = 'species'))
traits$spType[traits$spp == 'pring_dd'] <- 'DD'
#write.table(traits, "./allTraits_bySpp_final_withBT_withmaxHt_withSpType.csv", sep = '\t')
trees <- full_join(trees, spTable)
bothSp <- trees %>% filter(spType == 'both')
ggplot(bothSp, aes(x = species, y = dbh)) + geom_boxplot(aes(fill = forestType)) + scale_color_manual(values = c('#F66B0E', '#205375'), aesthetics = c('colour', 'fill'), labels = c('DDF', 'SEF')) + theme_classic() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + ylab('dbh (cm)')
#first, get the subset of traits we will be including.
traits4pca <- traits %>% select(leafArea_cm2_mean, SLA_mean, LDMC_mean, N_perc_mean, CN_mean, P_mg_kg_mean, woodDen_g_cm3_mean, maxHtm) %>% filter(maxHtm > 0) %>% drop_na()
traits_subset <- traits %>% right_join(traits4pca)
traitPCA <- prcomp(traits4pca, scale. = TRUE, center = TRUE)
autoplot(traitPCA, data = traits_subset, colour = 'spType', loadings = T, loadings.label = T, loadings.colour = 'gray35', loadings.label.colour = 'gray35', frame = TRUE) + theme_classic() + scale_color_manual(values = c('gray', '#F66B0E', '#205375'), aesthetics = c('colour', 'fill'))
spp_subset <- traits %>% filter(!(spp %in% c('rokaa', 'kokoh', 'popul', 'pring_DD')))
traits4pca <- spp_subset %>% select(leafArea_cm2_mean, SLA_mean, LDMC_mean, N_perc_mean, CN_mean, P_mg_kg_mean, woodDen_g_cm3_mean, maxHtm, BT5) %>% drop_na() %>% rename("leafArea" = "leafArea_cm2_mean", "SLA" = "SLA_mean", "LDMC" = 'LDMC_mean', "leafN" = 'N_perc_mean', 'leafCN' = 'CN_mean', "leafP" =  'P_mg_kg_mean', "woodDensity" = 'woodDen_g_cm3_mean', 'maxHeight' = 'maxHtm', 'barkThickness' = 'BT5')
traits_subset <- traits %>% right_join(traits4pca)
head(traits)
head(traits4pca)
#traits_subset <- traits %>% right_join(traits4pca)
traitPCA <- prcomp(traits4pca, scale. = TRUE, center = TRUE)
autoplot(traitPCA, data = traits_subset, colour = 'spType', loadings = T, loadings.label = T, loadings.colour = 'gray35', loadings.label.colour = 'gray35', frame = TRUE) + theme_classic() + scale_color_manual(values = c('gray', '#F66B0E', '#205375'), aesthetics = c('colour', 'fill'), labels = c('both', 'DDF', 'SEF')) + labs(fill = "Species found in:", color = "Species found in:")
autoplot(traitPCA, data = traits_subset)#, colour = 'spType', loadings = T, loadings.label = T, loadings.colour = 'gray35', loadings.label.colour = 'gray35', frame = TRUE) + theme_classic() + scale_color_manual(values = c('gray', '#F66B0E', '#205375'), aesthetics = c('colour', 'fill'), labels = c('both', 'DDF', 'SEF')) + labs(fill = "Species found in:", color = "Species found in:")
autoplot(traitPCA, data = traitPCA, colour = 'spType', loadings = T, loadings.label = T, loadings.colour = 'gray35', loadings.label.colour = 'gray35', frame = TRUE) + theme_classic() + scale_color_manual(values = c('gray', '#F66B0E', '#205375'), aesthetics = c('colour', 'fill'), labels = c('both', 'DDF', 'SEF')) + labs(fill = "Species found in:", color = "Species found in:")
traits4pca <- spp_subset %>% select(leafArea_cm2_mean, SLA_mean, LDMC_mean, N_perc_mean, CN_mean, P_mg_kg_mean, woodDen_g_cm3_mean, maxHtm, BT5) %>% drop_na()
traits_subset <- traits %>% right_join(traits4pca)
traits4pca <- traits4pca %>% rename("leafArea" = "leafArea_cm2_mean", "SLA" = "SLA_mean", "LDMC" = 'LDMC_mean', "leafN" = 'N_perc_mean', 'leafCN' = 'CN_mean', "leafP" =  'P_mg_kg_mean', "woodDensity" = 'woodDen_g_cm3_mean', 'maxHeight' = 'maxHtm', 'barkThickness' = 'BT5')
traits4pca <- spp_subset %>% select(leafArea_cm2_mean, SLA_mean, LDMC_mean, N_perc_mean, CN_mean, P_mg_kg_mean, woodDen_g_cm3_mean, maxHtm, BT5) %>% drop_na()
knitr::opts_chunk$set(echo = TRUE)
require(goeveg)
require(vegan)
require(tidyverse)
require(reshape2)
require(ggfortify)
require(GGally)
trees <- read.table("./treeDataNov252018_checked20211012.txt", header=TRUE, sep="\t", strip.white=TRUE)
trees$BA <- pi*(trees$dbh/2)^2
traits <- read.table("./allTraits_bySpp_final_withBT_withmaxHt.csv", header = T, sep = ',', strip.white = T)
traits$maxHtm[traits$maxHtm < 0] <- NA
trees$forestType <- substring(trees$plot, 1, 2)
EGba <- trees %>% filter(forestType == 'EG') %>% summarise(sum(BA))
DDba <- trees %>% filter(forestType == 'DD') %>% summarise(sum(BA, na.rm = T))
#write a function to apply to each species to see whether it's in EG only, DD only, or both
forestTypeFunc <- function(spp){
focalTrees <- trees[trees$species == spp,]
FT <- as.character(unique(focalTrees$forestType))
vegType <- ifelse(length(FT) == 1, FT, 'both')
if(vegType == 'both'){
EGbaFocal <- trees %>%
filter(species == spp, forestType == 'EG') %>%
summarise(EGrelAbund = sum(BA)/EGba)
DDbaFocal <- trees %>%
filter(species == spp, forestType == 'DD') %>%
summarise(DDrelAbund = sum(BA)/DDba)
max <- max(EGbaFocal/DDbaFocal, DDbaFocal/EGbaFocal)
vegType <- ifelse(max < 5, 'both', ifelse(EGbaFocal/DDbaFocal > 1, 'EG', 'DD'))
}
return(vegType)
}
species <- unique(trees$species)
spTable <- data.frame(species = as.character(species), spType = sapply(species, forestTypeFunc))
traits <- left_join(traits, spTable, by = c('spp' = 'species'))
traits$spType[traits$spp == 'pring_dd'] <- 'DD'
#write.table(traits, "./allTraits_bySpp_final_withBT_withmaxHt_withSpType.csv", sep = '\t')
trees <- full_join(trees, spTable)
bothSp <- trees %>% filter(spType == 'both')
ggplot(bothSp, aes(x = species, y = dbh)) + geom_boxplot(aes(fill = forestType)) + scale_color_manual(values = c('#F66B0E', '#205375'), aesthetics = c('colour', 'fill'), labels = c('DDF', 'SEF')) + theme_classic() + theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1)) + ylab('dbh (cm)')
#first, get the subset of traits we will be including.
traits4pca <- traits %>% select(leafArea_cm2_mean, SLA_mean, LDMC_mean, N_perc_mean, CN_mean, P_mg_kg_mean, woodDen_g_cm3_mean, maxHtm) %>% filter(maxHtm > 0) %>% drop_na()
traits_subset <- traits %>% right_join(traits4pca)
traitPCA <- prcomp(traits4pca, scale. = TRUE, center = TRUE)
autoplot(traitPCA, data = traits_subset, colour = 'spType', loadings = T, loadings.label = T, loadings.colour = 'gray35', loadings.label.colour = 'gray35', frame = TRUE) + theme_classic() + scale_color_manual(values = c('gray', '#F66B0E', '#205375'), aesthetics = c('colour', 'fill'))
spp_subset <- traits %>% filter(!(spp %in% c('rokaa', 'kokoh', 'popul', 'pring_DD')))
traits4pca <- spp_subset %>% select(leafArea_cm2_mean, SLA_mean, LDMC_mean, N_perc_mean, CN_mean, P_mg_kg_mean, woodDen_g_cm3_mean, maxHtm) %>% drop_na() %>% rename("leafArea" = "leafArea_cm2_mean", "SLA" = "SLA_mean", "LDMC" = 'LDMC_mean', "leafN" = 'N_perc_mean', 'leafCN' = 'CN_mean', "leafP" =  'P_mg_kg_mean', "woodDensity" = 'woodDen_g_cm3_mean', 'maxHeight' = 'maxHtm')
#rename these columns so they are neater on the figure
#traits_subset <- traits %>% right_join(traits4pca)
traitPCA <- prcomp(traits4pca, scale. = TRUE, center = TRUE)
summary(traitPCA)
autoplot(traitPCA, data = traits_subset, colour = 'spType', loadings = T, loadings.label = T, loadings.colour = 'gray35', loadings.label.colour = 'gray35', frame = TRUE) + theme_classic() + scale_color_manual(values = c('gray', '#F66B0E', '#205375'), aesthetics = c('colour', 'fill'), labels = c('both', 'DDF', 'SEF')) + labs(fill = "Species found in:", color = "Species found in:")
knitr::opts_chunk$set(echo = TRUE)
require(goeveg)
require(vegan)
require(tidyverse)
require(reshape2)
require(ggfortify)
require(GGally)
traits4pca <- spp_subset %>% select(leafArea_cm2_mean, SLA_mean, LDMC_mean, N_perc_mean, CN_mean, P_mg_kg_mean, woodDen_g_cm3_mean, maxHtm, BT5) %>% drop_na()
traits_subset <- traits %>% right_join(traits4pca)
traits4pca <- traits4pca %>% rename("leafArea" = "leafArea_cm2_mean", "SLA" = "SLA_mean", "LDMC" = 'LDMC_mean', "leafN" = 'N_perc_mean', 'leafCN' = 'CN_mean', "leafP" =  'P_mg_kg_mean', "woodDensity" = 'woodDen_g_cm3_mean', 'maxHeight' = 'maxHtm', 'barkThickness' = 'BT5')
traitPCA <- prcomp(traits4pca, scale. = TRUE, center = TRUE)
autoplot(traitPCA, data = traits_subset, colour = 'spType', loadings = T, loadings.label = T, loadings.colour = 'gray35', loadings.label.colour = 'gray35', frame = TRUE) + theme_classic() + scale_color_manual(values = c('gray', '#F66B0E', '#205375'), aesthetics = c('colour', 'fill'), labels = c('both', 'DDF', 'SEF')) + labs(fill = "Species found in:", color = "Species found in:")
ggsave('.PCA_plot_BTSpp.png', device = 'png', width = 5.5, height = 4, units = 'in')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggforce)
library(rstatix)
#read in soils data
soil <- read.table('./cambodia2k18_soils_final.csv', sep= ',', header = T)
##birng in C and N data, and then merge with other soil data
soil_CN <- read.table('./13C_soils_updated.csv', sep = ',', header = T)
soil_CN <- soil_CN %>% group_by(PLOT) %>% summarise(C_mean = mean(C.Corrected), N_mean = mean(N.Corrected), d13C_mean = mean(d13C.Corrected), CN_mean = mean(CN))
soil <- left_join(soil, soil_CN, by = c('plot' = 'PLOT'))
meancols.soil <- soil %>% ungroup() %>% select(CEC, CEC_Al, Sand, Silt, Clay, C_mean, N_mean, d13C_mean, CN_mean)
wilcox.soil <- function(x) {wilcox.test(x ~ soil$forestType)$p.value}
pvals <- apply(meancols.soil, 2, wilcox.soil)
pvals <- bind_cols(soilVar = names(pvals), pvals = round(pvals, digits = 2))
soil_Subset <- bind_cols(forestType = soil$forestType, plot = soil$plot, meancols.soil)
soilLong <- soil_Subset %>% pivot_longer(cols = c(CEC, CEC_Al, Sand, Silt, Clay, C_mean, N_mean, d13C_mean, CN_mean), names_to = 'soilVar')
ggplot(soilLong, aes(x = forestType, y = value)) +
geom_boxplot(aes(fill = forestType)) +
scale_fill_manual(values = rev(c('#5AB4AC', '#D8B365'))) +
facet_wrap(~soilVar, scales = 'free') +
geom_text(data = pvals,
aes(x = Inf, y = Inf, group = soilVar,
label = paste("p = ", pvals, sep = " ")),
hjust = 1, vjust = 1, inherit.aes = F)
soilLong2 <- soil_Subset %>% pivot_longer(cols = c(CEC, Sand, Silt, Clay, C_mean, N_mean, d13C_mean), names_to = 'soilVar')
ggplot(soilLong2, aes(x = forestType, y = value)) +
geom_boxplot(aes(fill = forestType)) +
scale_fill_manual(values = rev(c('#5AB4AC', '#D8B365'))) +
facet_wrap(~soilVar, scales = 'free') +
geom_text(data = pvals,
aes(x = Inf, y = Inf, group = soilVar,
label = paste("p = ", pvals, sep = " ")),
hjust = 1, vjust = 1, inherit.aes = F)
soilLong <- soil %>% select(plot, forestType, CEC, CEC_Al, Sand, Silt, Clay, C_mean, N_mean, d13C_mean, CN_mean) %>% pivot_longer(cols = c(CEC, CEC_Al, Sand, Silt, Clay, C_mean, N_mean, d13C_mean, CN_mean), names_to = 'soilVar')
soilSummary <- soilLong %>% group_by(forestType, soilVar) %>% summarise(mean = signif(mean(value), 3), stddev = signif(sd(value), 3))
soilTable <- pivot_wider(soilSummary, names_from = forestType, values_from = c(mean, stddev)) %>% full_join(pvals)
soilTablePretty <- data.frame(variable = soilTable$soilVar,
DDF = paste(soilTable$mean_DD, " (", soilTable$stddev_DD, ")", sep = ''),
SEF =paste(soilTable$mean_EG, " (", soilTable$stddev_EG, ")", sep = '' ),
pvals = soilTable$pvals)
#write.csv(soilTable, './soil_table.csv')
##write.csv(soilTablePretty, './soil_table_pretty.csv', row.names = F)
cwms <- read.table("D:/Sync/Research/Ongoing/CambodiaTreePaper/R/community_weighted_means.csv", sep = ',', header = T)
soilFocal <- soil %>% select(plot, forestType, CEC, CEC_Al, Sand, Silt, Clay, C_mean, N_mean, d13C_mean, CN_mean) %>% rename('CN_soil' = 'CN_mean')
cwm_soil <- full_join(cwms, soilFocal, by = c('plot', 'forestType'))
ggplot(cwm_soil, aes(x = .panel_x, y = .panel_y)) +
geom_autopoint(aes(color = forestType)) +
geom_smooth(method = 'lm') +
facet_matrix(cols = vars(CEC, CEC_Al, Sand, Silt, Clay, C_mean, N_mean, d13C_mean, CN_soil), rows = vars(leafArea_cm2_mean, SLA_mean, LDMC_mean, N_perc_mean, CN_mean, P_mg_kg_mean, woodDen_g_cm3_mean, maxHtm, BT5))
ggplot(cwm_soil, aes(x = .panel_x, y = .panel_y)) +
geom_autopoint(aes(color = forestType)) +
geom_smooth(method = 'lm') +
facet_matrix(cols = vars(CEC, CEC_Al, Sand, Silt, Clay, C_mean, N_mean, d13C_mean, CN_soil), rows = vars(leafArea_cm2_mean, SLA_mean, LDMC_mean, N_perc_mean, CN_mean, P_mg_kg_mean, woodDen_g_cm3_mean, maxHtm, BT5))
##make a correlation matrix
library(corrplot)
cormat2 <- cwm_soil %>% select(CEC, CEC_Al, Sand, Silt, Clay, C_mean, N_mean, d13C_mean, CN_soil, leafArea_cm2_mean, SLA_mean, LDMC_mean, N_perc_mean, CN_mean, P_mg_kg_mean, woodDen_g_cm3_mean, maxHtm, BT5)  %>% cor_mat(method = 'spearman')
pvals2 <- cormat2 %>% cor_get_pval()
pvals2 <- cormat2 %>% cor_get_pval()
cormat_subset <- cormat2 %>% filter(rowname %in% c("leafArea_cm2_mean", "SLA_mean", "LDMC_mean", "N_perc_mean", "CN_mean", "P_mg_kg_mean", "woodDen_g_cm3_mean", "maxHtm", "BT5")) %>% select(rowname, CEC, CEC_Al, Sand, Silt, Clay, C_mean, N_mean, d13C_mean, CN_soil)
pvals2 <- cormat2 %>% cor_get_pval()
cormat_subset <- cormat2 %>% filter(rowname %in% c("leafArea_cm2_mean", "SLA_mean", "LDMC_mean", "N_perc_mean", "CN_mean", "P_mg_kg_mean", "woodDen_g_cm3_mean", "maxHtm", "BT5")) %>% select(rowname, CEC, CEC_Al, Sand, Silt, Clay, C_mean, N_mean, d13C_mean, CN_soil)
pvals_subset <- pvals2 %>% filter(rowname %in% c("leafArea_cm2_mean", "SLA_mean", "LDMC_mean", "N_perc_mean", "CN_mean", "P_mg_kg_mean", "woodDen_g_cm3_mean", "maxHtm", "BT5")) %>% select(rowname, CEC, CEC_Al, Sand, Silt, Clay, C_mean, N_mean, d13C_mean, CN_soil)
write.csv(cormat_subset, './soil_trait_correlations_spearman.csv')
corrplot(as.matrix(cormat_subset[,2:ncol(cormat_subset)]), method="circle", type = 'full', order="original",insig = "label_sig",
p.mat = as.matrix(pvals_subset[,2:ncol(pvals_subset)]),
sig.level = c(.001, .01, .05), tl.col = "black", pch.cex = 0.85, pch.col = "white", diag = FALSE)
ggplot(cwm_soil, aes(x = .panel_x, y = .panel_y)) +
geom_autopoint(aes(color = forestType)) +
geom_smooth(method = 'lm') +
facet_matrix(cols = vars(CEC, CEC_Al, Sand, Silt, Clay, C_mean, N_mean, d13C_mean, CN_soil), rows = vars(leafArea_cm2_mean, SLA_mean, LDMC_mean, N_perc_mean, CN_mean, P_mg_kg_mean, woodDen_g_cm3_mean, maxHtm, BT5))
write.csv(pvals_subset, './pvals_soil_trait_spearman.csv')
corrplot(as.matrix(cormat_subset[,2:ncol(cormat_subset)]), method="circle", type = 'full', order="original",insig = "label_sig",
p.mat = as.matrix(pvals_subset[,2:ncol(pvals_subset)]),
sig.level = c(.001, .01, .05), tl.col = "black", pch.cex = 0.85, pch.col = "white", diag = FALSE)
git branch
setwd("~/naomibschwartz.github.io")
